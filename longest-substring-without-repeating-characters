Given a string s, find the length of the longest substring without duplicate characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] map = new int[256];
        Arrays.fill(map, -1);
        int length = 0, left = 0, right = 0, n = s.length();

        while (right < n) {
            if (map[s.charAt(right)] != -1) {
                left = Math.max(map[s.charAt(right)] + 1, left);
            }
            map[s.charAt(right)] = right;
            length = Math.max(length, right - left + 1);
            right++;
        }
        return length;
      
    }
}
